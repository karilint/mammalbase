# Generated by Django 3.2.23 on 2024-03-05 09:15

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_userforeignkey.models.fields
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tdwg', '0002_auto_20230512_1408'),
        ('mb', '0011_auto_20230513_2104'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('verbatim_event_date', models.CharField(blank=True, help_text='The verbatim original representation of the date and time information for an Event.', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_event', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_event', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='historicalmasterlocation',
            name='tgn',
        ),
        migrations.RemoveField(
            model_name='masterlocation',
            name='tgn',
        ),
        migrations.AddField(
            model_name='historicalmasterattribute',
            name='description',
            field=models.TextField(blank=True, help_text='Enter description for the Master Attribute', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterattribute',
            name='max_allowed_value',
            field=models.CharField(blank=True, help_text='Enter maximum value for the Master Attribute', max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterattribute',
            name='min_allowed_value',
            field=models.CharField(blank=True, help_text='Enter minimum value for the Master Attribute', max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterattribute',
            name='value_type',
            field=models.CharField(choices=[('numeric', 'numeric'), ('integer', 'integer'), ('categorical', 'categorical'), ('ordinal', 'ordinal'), ('logical', 'logical'), ('character', 'character')], default='character', help_text='Select the valueType of the MasterAttribute', max_length=25),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='continent',
            field=models.CharField(blank=True, help_text='Enter the continent of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='country',
            field=models.CharField(blank=True, help_text='Enter the country of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='countryCode',
            field=models.CharField(blank=True, help_text='Enter the country code of the Master Location', max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='county',
            field=models.CharField(blank=True, help_text='Enter the county of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='decimalLatitude',
            field=models.CharField(blank=True, help_text='Enter the decimal latitude of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='decimalLongitude',
            field=models.CharField(blank=True, help_text='Enter the decimal longitude of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='geodeticDatum',
            field=models.CharField(blank=True, help_text='Enter the geodetic datum of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='higherGeographyID',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterlocation'),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='locality',
            field=models.CharField(blank=True, help_text='Enter the locality of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='locationAccordingTo',
            field=models.CharField(blank=True, help_text='Enter the information about the source of this location information of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='locationID',
            field=models.CharField(blank=True, help_text='Enter the locationID of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='locationRemarks',
            field=models.CharField(blank=True, help_text='Enter the location remarks of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='maximumElevationInMeters',
            field=models.CharField(blank=True, help_text='Enter the maximum elevation in meters of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='minimumElevationInMeters',
            field=models.CharField(blank=True, help_text='Enter the minimum elevation in meters of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='municipality',
            field=models.CharField(blank=True, help_text='Enter the municipality of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterlocation',
            name='stateProvince',
            field=models.CharField(blank=True, help_text='Enter the state province of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalmasterreference',
            name='is_public',
            field=models.BooleanField(help_text='Enter if the source is public', null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='ash_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='ash_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='cf_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='cf_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='cp_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='cp_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='dm_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='dm_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='ee_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='ee_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='measurement_determined_by',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='measurement_remarks',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='moisture_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='moisture_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='nfe_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='historicalproximateanalysisitem',
            name='nfe_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalsourceentity',
            name='taxon',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tdwg.taxon'),
        ),
        migrations.AddField(
            model_name='historicalsourcelocation',
            name='verbatim_coordinate_system',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim coordinate system.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalsourcelocation',
            name='verbatim_coordinates',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim coordinates.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalsourcelocation',
            name='verbatim_depth',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim depth.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalsourcelocation',
            name='verbatim_elevation',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim elevation.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalsourcelocation',
            name='verbatim_latitude',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim latitude.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalsourcelocation',
            name='verbatim_longitude',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim longitude.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='historicalsourcelocation',
            name='verbatim_srs',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim spatial reference system.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='description',
            field=models.TextField(blank=True, help_text='Enter description for the Master Attribute', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='max_allowed_value',
            field=models.CharField(blank=True, help_text='Enter maximum value for the Master Attribute', max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='min_allowed_value',
            field=models.CharField(blank=True, help_text='Enter minimum value for the Master Attribute', max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='source_attribute',
            field=models.ManyToManyField(through='mb.AttributeRelation', to='mb.SourceAttribute'),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='value_type',
            field=models.CharField(choices=[('numeric', 'numeric'), ('integer', 'integer'), ('categorical', 'categorical'), ('ordinal', 'ordinal'), ('logical', 'logical'), ('character', 'character')], default='character', help_text='Select the valueType of the MasterAttribute', max_length=25),
        ),
        migrations.AddField(
            model_name='masterchoicesetoption',
            name='source_choiceset_option',
            field=models.ManyToManyField(through='mb.ChoiceSetOptionRelation', to='mb.SourceChoiceSetOption'),
        ),
        migrations.AddField(
            model_name='masterentity',
            name='source_entity',
            field=models.ManyToManyField(through='mb.EntityRelation', to='mb.SourceEntity'),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='continent',
            field=models.CharField(blank=True, help_text='Enter the continent of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='country',
            field=models.CharField(blank=True, help_text='Enter the country of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='countryCode',
            field=models.CharField(blank=True, help_text='Enter the country code of the Master Location', max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='county',
            field=models.CharField(blank=True, help_text='Enter the county of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='decimalLatitude',
            field=models.CharField(blank=True, help_text='Enter the decimal latitude of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='decimalLongitude',
            field=models.CharField(blank=True, help_text='Enter the decimal longitude of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='geodeticDatum',
            field=models.CharField(blank=True, help_text='Enter the geodetic datum of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='higherGeographyID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.masterlocation'),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='locality',
            field=models.CharField(blank=True, help_text='Enter the locality of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='locationAccordingTo',
            field=models.CharField(blank=True, help_text='Enter the information about the source of this location information of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='locationID',
            field=models.CharField(blank=True, help_text='Enter the locationID of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='locationRemarks',
            field=models.CharField(blank=True, help_text='Enter the location remarks of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='maximumElevationInMeters',
            field=models.CharField(blank=True, help_text='Enter the maximum elevation in meters of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='minimumElevationInMeters',
            field=models.CharField(blank=True, help_text='Enter the minimum elevation in meters of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='municipality',
            field=models.CharField(blank=True, help_text='Enter the municipality of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterlocation',
            name='stateProvince',
            field=models.CharField(blank=True, help_text='Enter the state province of the Master Location', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='masterreference',
            name='is_public',
            field=models.BooleanField(help_text='Enter if the source is public', null=True),
        ),
        migrations.AddField(
            model_name='masterunit',
            name='source_unit',
            field=models.ManyToManyField(to='mb.SourceUnit'),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='ash_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='ash_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='cf_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='cf_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='cp_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='cp_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='dm_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='dm_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='ee_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='ee_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='measurement_determined_by',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='measurement_remarks',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='moisture_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='moisture_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='nfe_dispersion',
            field=models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)]),
        ),
        migrations.AddField(
            model_name='proximateanalysisitem',
            name='nfe_measurement_method',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='sourceattribute',
            name='master_attribute',
            field=models.ManyToManyField(through='mb.AttributeRelation', to='mb.MasterAttribute'),
        ),
        migrations.AddField(
            model_name='sourcechoicesetoption',
            name='master_choiceset_option',
            field=models.ManyToManyField(through='mb.ChoiceSetOptionRelation', to='mb.MasterChoiceSetOption'),
        ),
        migrations.AddField(
            model_name='sourceentity',
            name='master_entity',
            field=models.ManyToManyField(through='mb.EntityRelation', to='mb.MasterEntity'),
        ),
        migrations.AddField(
            model_name='sourceentity',
            name='taxon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tdwg.taxon'),
        ),
        migrations.AddField(
            model_name='sourcelocation',
            name='verbatim_coordinate_system',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim coordinate system.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='sourcelocation',
            name='verbatim_coordinates',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim coordinates.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='sourcelocation',
            name='verbatim_depth',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim depth.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='sourcelocation',
            name='verbatim_elevation',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim elevation.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='sourcelocation',
            name='verbatim_latitude',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim latitude.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='sourcelocation',
            name='verbatim_longitude',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim longitude.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='sourcelocation',
            name='verbatim_srs',
            field=models.CharField(blank=True, help_text='The original textual description of the verbatim spatial reference system.', max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='sourceunit',
            name='master_unit',
            field=models.ManyToManyField(through='mb.UnitRelation', to='mb.MasterUnit'),
        ),
        migrations.AlterField(
            model_name='dietsetitem',
            name='percentage',
            field=models.DecimalField(decimal_places=3, default=0, max_digits=9),
        ),
        migrations.AlterField(
            model_name='historicaldietsetitem',
            name='percentage',
            field=models.DecimalField(decimal_places=3, default=0, max_digits=9),
        ),
        migrations.AlterField(
            model_name='historicalmasterreference',
            name='citation',
            field=models.CharField(help_text='Enter the Citation of the Standard Reference', max_length=500),
        ),
        migrations.AlterField(
            model_name='masterreference',
            name='citation',
            field=models.CharField(help_text='Enter the Citation of the Standard Reference', max_length=500),
        ),
        migrations.CreateModel(
            name='SourceHabitat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('habitat_type', models.CharField(blank=True, help_text='Enter the Name of the Source Habitat', max_length=250, null=True)),
                ('habitat_percentage', models.CharField(blank=True, help_text='Enter the Percentage of the Source Habitat', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcehabitat', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcehabitat', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('organism_quantity', models.CharField(blank=True, help_text='The number of organisms in the Occurrence.', max_length=50, null=True)),
                ('organism_quantity_type', models.CharField(blank=True, help_text='The type of the number of organisms in the Occurrence.', max_length=50, null=True)),
                ('occurrence_remarks', models.TextField(blank=True, help_text='Comments or notes about the Occurrence.', null=True)),
                ('associated_references', models.TextField(blank=True, help_text='References to other sources of information about the Occurrence.', null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_occurrence', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.event')),
                ('gender', models.ForeignKey(blank=True, limit_choices_to={'choice_set': 'Gender'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gender_occurrence', to='mb.choicevalue')),
                ('life_stage', models.ForeignKey(blank=True, limit_choices_to={'choice_set': 'LifeStage'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='life_stage_occurrence', to='mb.choicevalue')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_occurrence', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taxon_occurrence', to='mb.sourceentity')),
                ('source_location', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcelocation')),
                ('source_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MasterHabitat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Habitat', max_length=250)),
                ('code', models.PositiveSmallIntegerField(blank=True, help_text='Enter the eco/biome/IIASA code of the Master Habitat', null=True)),
                ('group', models.CharField(blank=True, help_text='Enter the gourp or category of the Master Habitat', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterhabitat', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterhabitat', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.masterhabitat')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterreference')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalSourceHabitat',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('habitat_type', models.CharField(blank=True, help_text='Enter the Name of the Source Habitat', max_length=250, null=True)),
                ('habitat_percentage', models.CharField(blank=True, help_text='Enter the Percentage of the Source Habitat', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical source habitat',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOccurrence',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('organism_quantity', models.CharField(blank=True, help_text='The number of organisms in the Occurrence.', max_length=50, null=True)),
                ('organism_quantity_type', models.CharField(blank=True, help_text='The type of the number of organisms in the Occurrence.', max_length=50, null=True)),
                ('occurrence_remarks', models.TextField(blank=True, help_text='Comments or notes about the Occurrence.', null=True)),
                ('associated_references', models.TextField(blank=True, help_text='References to other sources of information about the Occurrence.', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('event', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.event')),
                ('gender', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'choice_set': 'Gender'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.choicevalue')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('life_stage', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'choice_set': 'LifeStage'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.choicevalue')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceentity')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcelocation')),
                ('source_reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical occurrence',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterHabitat',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Habitat', max_length=250)),
                ('code', models.PositiveSmallIntegerField(blank=True, help_text='Enter the eco/biome/IIASA code of the Master Habitat', null=True)),
                ('group', models.CharField(blank=True, help_text='Enter the gourp or category of the Master Habitat', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterhabitat')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterreference')),
            ],
            options={
                'verbose_name': 'historical master habitat',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLocationRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterlocation')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcelocation')),
            ],
            options={
                'verbose_name': 'historical location relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalHabitatRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_habitat', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterhabitat')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_habitat', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcehabitat')),
            ],
            options={
                'verbose_name': 'historical habitat relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEvent',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('verbatim_event_date', models.CharField(blank=True, help_text='The verbatim original representation of the date and time information for an Event.', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_habitat', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcehabitat')),
                ('source_method', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcemethod')),
            ],
            options={
                'verbose_name': 'historical event',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='event',
            name='source_habitat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcehabitat'),
        ),
        migrations.AddField(
            model_name='event',
            name='source_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcemethod'),
        ),
        migrations.CreateModel(
            name='LocationRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_locationrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterlocation')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_locationrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcelocation')),
            ],
            options={
                'unique_together': {('source_location', 'master_location')},
            },
        ),
        migrations.CreateModel(
            name='HabitatRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_habitatrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_habitat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterhabitat')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_habitatrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_habitat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcehabitat')),
            ],
            options={
                'unique_together': {('source_habitat', 'master_habitat')},
            },
        ),
    ]
