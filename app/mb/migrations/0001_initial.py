# Generated by Django 3.2.25 on 2024-03-28 10:17

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_userforeignkey.models.fields
import mb.models.validators
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('itis', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tdwg', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ViewMasterTraitValue',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('master_entity_name', models.CharField(max_length=200)),
                ('master_attribute_name', models.CharField(max_length=200)),
                ('traits_references', models.CharField(blank=True, max_length=400, null=True)),
                ('assigned_values', models.CharField(blank=True, max_length=400, null=True)),
                ('n_distinct_value', models.PositiveSmallIntegerField()),
                ('n_value', models.PositiveSmallIntegerField()),
                ('n_supporting_value', models.PositiveSmallIntegerField()),
                ('trait_values', models.CharField(blank=True, max_length=400, null=True)),
                ('trait_selected', models.CharField(blank=True, max_length=400, null=True)),
                ('trait_references', models.CharField(blank=True, max_length=400, null=True)),
                ('value_percentage', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True)),
            ],
            options={
                'db_table': 'mb_view_master_trait_values',
                'ordering': ['id', 'master_attribute_name'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ViewProximateAnalysisTable',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('part', models.CharField(max_length=200)),
                ('cp_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True)),
                ('ee_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True)),
                ('cf_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True)),
                ('ash_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True)),
                ('nfe_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True)),
                ('reference_ids', models.CharField(max_length=200)),
                ('n_taxa', models.PositiveSmallIntegerField()),
                ('n_reference', models.PositiveSmallIntegerField()),
                ('n_analysis', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'mb_view_pa_table',
                'ordering': ['part', 'tsn__hierarchy'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeGroupRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('display_order', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['group__name', 'display_order'],
            },
        ),
        migrations.CreateModel(
            name='AttributeRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Attribute Relation', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_attributerelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
        ),
        migrations.CreateModel(
            name='ChoiceSetOptionRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the ChoiceSetOption Relation', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_choicesetoptionrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
        ),
        migrations.CreateModel(
            name='ChoiceValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('choice_set', models.CharField(help_text='Enter the Choice Set of the ChoiceValue', max_length=25)),
                ('caption', models.CharField(help_text='Enter the Caption of the ChoiceValue', max_length=25)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_choicevalue', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_choicevalue', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['choice_set', 'caption'],
                'unique_together': {('choice_set', 'caption')},
            },
        ),
        migrations.CreateModel(
            name='DietSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('sample_size', models.PositiveSmallIntegerField(default=0, help_text='Sample Size')),
                ('cited_reference', models.CharField(blank=True, help_text="Enter the original reference, if not this study. If original, enter 'Original study'.", max_length=250, null=True)),
                ('study_time', models.CharField(blank=True, help_text='Enter the time when this study was performed.', max_length=250, null=True)),
                ('data_quality_score', models.SmallIntegerField(blank=True, default=0, help_text='Data quality score for the data', null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_dietset', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('gender', models.ForeignKey(blank=True, limit_choices_to={'choice_set': 'Gender'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mb.choicevalue')),
            ],
            options={
                'ordering': ['taxon__name', 'reference'],
            },
        ),
        migrations.CreateModel(
            name='EntityClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Entity Class', max_length=50)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_entityclass', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_entityclass', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EntityRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Entity Relation', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_entityrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('verbatim_event_date', models.CharField(blank=True, help_text='The verbatim original representation of the date and time information for an Event.', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_event', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_event', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the FoodItem', max_length=250, unique=True)),
                ('is_cultivar', models.BooleanField(default=False, help_text='Is this Food Item a FAO cultivar?')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_fooditem', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_fooditem', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('pa_tsn', models.ForeignKey(blank=True, db_column='pa_tsn', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tsn_pa', to='itis.taxonomicunits')),
                ('part', models.ForeignKey(limit_choices_to={'choice_set': 'FoodItemPart'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mb.choicevalue')),
                ('tsn', models.ForeignKey(blank=True, db_column='tsn', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tsn_food', to='itis.taxonomicunits')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MasterAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Attribute', max_length=250)),
                ('min_allowed_value', models.CharField(blank=True, help_text='Enter minimum value for the Master Attribute', max_length=25, null=True)),
                ('max_allowed_value', models.CharField(blank=True, help_text='Enter maximum value for the Master Attribute', max_length=25, null=True)),
                ('description', models.TextField(blank=True, help_text='Enter description for the Master Attribute', max_length=500, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Master Attribute', max_length=500, null=True)),
                ('value_type', models.CharField(choices=[('numeric', 'numeric'), ('integer', 'integer'), ('categorical', 'categorical'), ('ordinal', 'ordinal'), ('logical', 'logical'), ('character', 'character')], default='character', help_text='Select the valueType of the MasterAttribute', max_length=25)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterattribute', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.entityclass')),
            ],
            options={
                'ordering': ['entity__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MasterChoiceSetOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('display_order', models.PositiveSmallIntegerField(default=10, help_text='Display order on choises')),
                ('name', models.CharField(help_text='Enter the Name of the Master Attribute', max_length=250)),
                ('description', models.TextField(blank=True, help_text='Enter description for the Master Choice Set Option', max_length=1500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterchoicesetoption', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterattribute')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterchoicesetoption', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['master_attribute__name', 'display_order'],
            },
        ),
        migrations.CreateModel(
            name='MasterEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Entity', max_length=250)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterentity', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.entityclass')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterentity', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MasterReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('type', models.CharField(blank=True, choices=[('book', 'book'), ('book-chapter', 'book-chapter'), ('book-part', 'book-part'), ('book-section', 'book-section'), ('book-series', 'book-series'), ('book-set', 'book-set'), ('book-track', 'book-track'), ('component', 'component'), ('dataset', 'dataset'), ('dissertation', 'dissertation'), ('edited-book', 'edited-book'), ('journal', 'journal'), ('journal-article', 'journal-article'), ('journal-issue', 'journal-issue'), ('journal-volume', 'journal-volume'), ('monograph', 'monograph'), ('other', 'other'), ('posted-content', 'posted-content'), ('proceedings', 'proceedings'), ('proceedings-article', 'proceedings-article'), ('reference-book', 'reference-book'), ('reference-entry', 'reference-entry'), ('report', 'report'), ('report-series', 'report-series'), ('standard', 'standard'), ('standard-series', 'standard-series')], default='other', help_text='Select the type of the Standard Reference', max_length=25, null=True)),
                ('doi', models.CharField(blank=True, help_text='Enter the DOI number that begins with 10 followed by a period', max_length=100, null=True, validators=[mb.models.validators.validate_doi])),
                ('uri', models.URLField(blank=True, help_text='Enter the Uniform Resource Identifier link', null=True)),
                ('first_author', models.CharField(blank=True, help_text='Enter the name of the first author of the Standard Reference', max_length=50, null=True)),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2100)])),
                ('title', models.CharField(blank=True, help_text='Enter the Title of the Standard Reference', max_length=400, null=True)),
                ('container_title', models.CharField(blank=True, help_text='Enter the Container Title of the Standard Reference', max_length=100, null=True)),
                ('volume', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4000)])),
                ('issue', models.CharField(blank=True, help_text='Enter the Issue of the Standard Reference', max_length=5, null=True)),
                ('page', models.CharField(blank=True, help_text='Enter the Page(s) of the Standard Reference', max_length=50, null=True)),
                ('citation', models.CharField(help_text='Enter the Citation of the Standard Reference', max_length=500)),
                ('is_public', models.BooleanField(help_text='Enter if the source is public', null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterreference', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterreference', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['citation'],
            },
        ),
        migrations.CreateModel(
            name='MasterUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the name of the Master Unit', max_length=25)),
                ('print_name', models.CharField(help_text='Enter the Print value of the name of a Master Unit', max_length=25)),
                ('quantity_type', models.CharField(help_text='Enter the Quantity type of the Master Unit', max_length=25)),
                ('unit_value', models.DecimalField(decimal_places=10, max_digits=19)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Master Unit', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterunit', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterunit', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['quantity_type', 'unit_value'],
            },
        ),
        migrations.CreateModel(
            name='ProximateAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('cited_reference', models.CharField(blank=True, help_text='Enter the original reference, if not this study.', max_length=250, null=True)),
                ('study_time', models.CharField(blank=True, help_text='Enter the time when this study was performed.', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_proximateanalysis', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['reference'],
            },
        ),
        migrations.CreateModel(
            name='SourceAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Attribute', max_length=250)),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'Not Specified'), (1, 'Numerical variable'), (2, 'Categorical variable')], default=3, help_text='Select the type of the Attribute')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Attribute', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourceattribute', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.entityclass')),
                ('master_attribute', models.ManyToManyField(through='mb.AttributeRelation', to='mb.MasterAttribute')),
            ],
            options={
                'ordering': ['entity__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SourceChoiceSetOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('display_order', models.PositiveSmallIntegerField(default=10, help_text='Display order on choises')),
                ('name', models.CharField(help_text='Enter the Source Choice Set Option', max_length=250)),
                ('description', models.TextField(blank=True, help_text='Enter the description for the Source Choice Set Option', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcechoicesetoption', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_choiceset_option', models.ManyToManyField(through='mb.ChoiceSetOptionRelation', to='mb.MasterChoiceSetOption')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcechoicesetoption', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourceattribute')),
            ],
            options={
                'ordering': ['source_attribute__name', 'display_order'],
            },
        ),
        migrations.CreateModel(
            name='SourceEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Source Entity', max_length=250)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourceentity', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.entityclass')),
                ('master_entity', models.ManyToManyField(through='mb.EntityRelation', to='mb.MasterEntity')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourceentity', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SourceLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Source Location', max_length=250)),
                ('verbatim_elevation', models.CharField(blank=True, help_text='The original textual description of the verbatim elevation.', max_length=250, null=True)),
                ('verbatim_longitude', models.CharField(blank=True, help_text='The original textual description of the verbatim longitude.', max_length=250, null=True)),
                ('verbatim_latitude', models.CharField(blank=True, help_text='The original textual description of the verbatim latitude.', max_length=250, null=True)),
                ('verbatim_depth', models.CharField(blank=True, help_text='The original textual description of the verbatim depth.', max_length=250, null=True)),
                ('verbatim_coordinate_system', models.CharField(blank=True, help_text='The original textual description of the verbatim coordinate system.', max_length=250, null=True)),
                ('verbatim_coordinates', models.CharField(blank=True, help_text='The original textual description of the verbatim coordinates.', max_length=250, null=True)),
                ('verbatim_srs', models.CharField(blank=True, help_text='The original textual description of the verbatim spatial reference system.', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcelocation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcelocation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SourceReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('citation', models.CharField(help_text='Enter the Citation of the Source Reference', max_length=450)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Created - Not verified'), (2, 'Verified - Accepted'), (3, 'Verified - Rejected')], default=1, help_text='Status of the Std. Reference')),
                ('doi', models.CharField(blank=True, help_text='Enter the DOI number that begins with 10 followed by a period', max_length=100, null=True, validators=[mb.models.validators.validate_doi])),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcereference', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mb.masterreference')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcereference', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['citation'],
            },
        ),
        migrations.CreateModel(
            name='SourceUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the name of the Source Unit', max_length=25)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Source Unit', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourceunit', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UnitRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Unit Relation', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_unitrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterunit')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_unitrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourceunit')),
            ],
            options={
                'unique_together': {('source_unit', 'master_unit')},
            },
        ),
        migrations.CreateModel(
            name='TimePeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Time Period', max_length=50)),
                ('time_in_months', models.PositiveSmallIntegerField(default=12, help_text='Enter an estimate of Time Period in months.')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_timeperiod', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_timeperiod', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('reference', 'name')},
            },
        ),
        migrations.AddField(
            model_name='sourceunit',
            name='master_unit',
            field=models.ManyToManyField(through='mb.UnitRelation', to='mb.MasterUnit'),
        ),
        migrations.AddField(
            model_name='sourceunit',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourceunit', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.CreateModel(
            name='SourceStatistic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the statistic described in the Reference', max_length=500)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcestatistic', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcestatistic', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('reference', 'name')},
            },
        ),
        migrations.CreateModel(
            name='SourceMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the method described in the Reference', max_length=500)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcemethod', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcemethod', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('reference', 'name')},
            },
        ),
        migrations.CreateModel(
            name='SourceMeasurementValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('n_total', models.PositiveSmallIntegerField(blank=True, default=0, help_text='n for total number of specimens measured.', null=True)),
                ('n_unknown', models.PositiveSmallIntegerField(blank=True, default=0, help_text='n for total number of unknown gender specimens measured.', null=True)),
                ('n_male', models.PositiveSmallIntegerField(blank=True, default=0, help_text='n for total number of male specimens measured.', null=True)),
                ('n_female', models.PositiveSmallIntegerField(blank=True, default=0, help_text='n for total number of female specimens measured.', null=True)),
                ('minimum', models.DecimalField(decimal_places=10, help_text='Minimum measurement value reported.', max_digits=19)),
                ('maximum', models.DecimalField(decimal_places=10, help_text='Maximum measurement value reported.', max_digits=19)),
                ('mean', models.DecimalField(decimal_places=10, help_text='Mean of measurement values reported.', max_digits=19)),
                ('std', models.DecimalField(blank=True, decimal_places=10, default=None, help_text='Standard deviation of measurement values reported.', max_digits=19, null=True)),
                ('measurement_accuracy', models.TextField(blank=True, help_text='The description of the potential error associated with the measurementValue.', max_length=50, null=True)),
                ('measured_by', models.TextField(blank=True, help_text="A list (concatenated and separated) of names of people, groups, or organizations who determined the value of the measurement. The recommended best practice is to separate the values with a vertical bar (' | ').", max_length=100, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Source Measurement', max_length=500, null=True)),
                ('data_quality_score', models.SmallIntegerField(blank=True, default=0, help_text='Data quality score for the data', null=True)),
                ('cited_reference', models.CharField(blank=True, help_text="Enter the original reference, if not this study. If original, enter 'Original study'.", max_length=1000, null=True)),
                ('unit', models.CharField(blank=True, help_text='Measurement unit reported.', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcemeasurementvalue', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('gender', models.ForeignKey(blank=True, limit_choices_to={'choice_set': 'Gender'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gendersourcemeasurementvalue', to='mb.choicevalue')),
                ('life_stage', models.ForeignKey(blank=True, limit_choices_to={'choice_set': 'LifeStage'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lifestagesourcemeasurementvalue', to='mb.choicevalue')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcemeasurementvalue', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourceattribute')),
                ('source_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourceentity')),
                ('source_location', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcelocation')),
                ('source_statistic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mb.sourcestatistic')),
                ('source_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mb.sourceunit')),
            ],
            options={
                'ordering': ['source_attribute__name', '-n_total'],
            },
        ),
        migrations.AddField(
            model_name='sourcelocation',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference'),
        ),
        migrations.CreateModel(
            name='SourceHabitat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('habitat_type', models.CharField(blank=True, help_text='Enter the Name of the Source Habitat', max_length=250, null=True)),
                ('habitat_percentage', models.CharField(blank=True, help_text='Enter the Percentage of the Source Habitat', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcehabitat', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcehabitat', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sourceentity',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference'),
        ),
        migrations.AddField(
            model_name='sourceentity',
            name='taxon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tdwg.taxon'),
        ),
        migrations.CreateModel(
            name='SourceChoiceSetOptionValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_sourcechoicesetoptionvalue', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourcechoicesetoptionvalue', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_choiceset_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcechoicesetoption')),
                ('source_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourceentity')),
            ],
            options={
                'ordering': ['source_entity__name', 'source_choiceset_option__display_order'],
            },
        ),
        migrations.AddField(
            model_name='sourceattribute',
            name='method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='method_sourceattribute', to='mb.sourcemethod'),
        ),
        migrations.AddField(
            model_name='sourceattribute',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_sourceattribute', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.AddField(
            model_name='sourceattribute',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference'),
        ),
        migrations.CreateModel(
            name='RelationClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the RelationClass', max_length=25)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_relationclass', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_relationclass', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProximateAnalysisItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('cited_reference', models.CharField(blank=True, help_text='Enter the original reference, if not this study.', max_length=250, null=True)),
                ('sample_size', models.PositiveSmallIntegerField(blank=True, default=0, help_text='Sample size', null=True)),
                ('dm_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('moisture_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cp_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ee_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cf_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ash_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('nfe_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('total_carbohydrates_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cp_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ee_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cf_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ash_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nfe_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('transformation', models.CharField(blank=True, max_length=250, null=True)),
                ('remarks', models.CharField(blank=True, help_text='Enter remarks.', max_length=250, null=True)),
                ('measurement_determined_by', models.CharField(blank=True, max_length=250, null=True)),
                ('measurement_remarks', models.CharField(blank=True, max_length=250, null=True)),
                ('moisture_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('moisture_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('dm_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('dm_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('ee_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ee_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('cp_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cp_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('cf_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cf_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('ash_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ash_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('nfe_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('nfe_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_proximateanalysisitem', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('forage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.fooditem')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcelocation')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_proximateanalysisitem', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('proximate_analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.proximateanalysis')),
            ],
            options={
                'ordering': ['proximate_analysis', 'forage'],
            },
        ),
        migrations.AddField(
            model_name='proximateanalysis',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcelocation'),
        ),
        migrations.AddField(
            model_name='proximateanalysis',
            name='method',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcemethod'),
        ),
        migrations.AddField(
            model_name='proximateanalysis',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_proximateanalysis', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.AddField(
            model_name='proximateanalysis',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference'),
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('organism_quantity', models.CharField(blank=True, help_text='The number of organisms in the Occurrence.', max_length=50, null=True)),
                ('organism_quantity_type', models.CharField(blank=True, help_text='The type of the number of organisms in the Occurrence.', max_length=50, null=True)),
                ('occurrence_remarks', models.TextField(blank=True, help_text='Comments or notes about the Occurrence.', null=True)),
                ('associated_references', models.TextField(blank=True, help_text='References to other sources of information about the Occurrence.', null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_occurrence', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.event')),
                ('gender', models.ForeignKey(blank=True, limit_choices_to={'choice_set': 'Gender'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gender_occurrence', to='mb.choicevalue')),
                ('life_stage', models.ForeignKey(blank=True, limit_choices_to={'choice_set': 'LifeStage'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='life_stage_occurrence', to='mb.choicevalue')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_occurrence', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taxon_occurrence', to='mb.sourceentity')),
                ('source_location', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcelocation')),
                ('source_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='masterunit',
            name='source_unit',
            field=models.ManyToManyField(to='mb.SourceUnit'),
        ),
        migrations.CreateModel(
            name='MasterLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Location', max_length=250)),
                ('locationID', models.CharField(blank=True, help_text='Enter the locationID of the Master Location', max_length=250, null=True)),
                ('continent', models.CharField(blank=True, help_text='Enter the continent of the Master Location', max_length=250, null=True)),
                ('country', models.CharField(blank=True, help_text='Enter the country of the Master Location', max_length=250, null=True)),
                ('countryCode', models.CharField(blank=True, help_text='Enter the country code of the Master Location', max_length=10, null=True)),
                ('stateProvince', models.CharField(blank=True, help_text='Enter the state province of the Master Location', max_length=250, null=True)),
                ('county', models.CharField(blank=True, help_text='Enter the county of the Master Location', max_length=250, null=True)),
                ('municipality', models.CharField(blank=True, help_text='Enter the municipality of the Master Location', max_length=250, null=True)),
                ('locality', models.CharField(blank=True, help_text='Enter the locality of the Master Location', max_length=250, null=True)),
                ('minimumElevationInMeters', models.CharField(blank=True, help_text='Enter the minimum elevation in meters of the Master Location', max_length=250, null=True)),
                ('maximumElevationInMeters', models.CharField(blank=True, help_text='Enter the maximum elevation in meters of the Master Location', max_length=250, null=True)),
                ('locationAccordingTo', models.CharField(blank=True, help_text='Enter the information about the source of this location information of the Master Location', max_length=250, null=True)),
                ('locationRemarks', models.CharField(blank=True, help_text='Enter the location remarks of the Master Location', max_length=250, null=True)),
                ('decimalLatitude', models.CharField(blank=True, help_text='Enter the decimal latitude of the Master Location', max_length=250, null=True)),
                ('decimalLongitude', models.CharField(blank=True, help_text='Enter the decimal longitude of the Master Location', max_length=250, null=True)),
                ('geodeticDatum', models.CharField(blank=True, help_text='Enter the geodetic datum of the Master Location', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterlocation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('higherGeographyID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.masterlocation')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterlocation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterreference')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MasterHabitat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Habitat', max_length=250)),
                ('code', models.PositiveSmallIntegerField(blank=True, help_text='Enter the eco/biome/IIASA code of the Master Habitat', null=True)),
                ('group', models.CharField(blank=True, help_text='Enter the group or category of the Master Habitat', max_length=250, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterhabitat', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterhabitat', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.masterhabitat')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterreference')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='masterentity',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterreference'),
        ),
        migrations.AddField(
            model_name='masterentity',
            name='source_entity',
            field=models.ManyToManyField(through='mb.EntityRelation', to='mb.SourceEntity'),
        ),
        migrations.AddField(
            model_name='masterentity',
            name='taxon',
            field=models.ForeignKey(blank=True, help_text='The associated taxon (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='master_entities', to='tdwg.taxon'),
        ),
        migrations.AddField(
            model_name='masterchoicesetoption',
            name='source_choiceset_option',
            field=models.ManyToManyField(through='mb.ChoiceSetOptionRelation', to='mb.SourceChoiceSetOption'),
        ),
        migrations.CreateModel(
            name='MasterAttributeGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Attribute Group', max_length=250)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Master Attribute Group', max_length=500, null=True)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_masterattributegroup', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterattributegroup', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='groups',
            field=models.ManyToManyField(through='mb.AttributeGroupRelation', to='mb.MasterAttributeGroup'),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_masterattribute', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterreference'),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='source_attribute',
            field=models.ManyToManyField(through='mb.AttributeRelation', to='mb.SourceAttribute'),
        ),
        migrations.AddField(
            model_name='masterattribute',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.masterunit'),
        ),
        migrations.CreateModel(
            name='HistoricalUnitRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Unit Relation', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_unit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterunit')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_unit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceunit')),
            ],
            options={
                'verbose_name': 'historical unit relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUnitConversion',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('coefficient', models.DecimalField(decimal_places=10, max_digits=19)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('from_unit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterunit')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('to_unit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterunit')),
            ],
            options={
                'verbose_name': 'historical unit conversion',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTimePeriod',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Time Period', max_length=50)),
                ('time_in_months', models.PositiveSmallIntegerField(default=12, help_text='Enter an estimate of Time Period in months.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical time period',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceUnit',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the name of the Source Unit', max_length=25)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Source Unit', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical source unit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceStatistic',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the statistic described in the Reference', max_length=500)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical source statistic',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceReference',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('citation', models.CharField(help_text='Enter the Citation of the Source Reference', max_length=450)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Created - Not verified'), (2, 'Verified - Accepted'), (3, 'Verified - Rejected')], default=1, help_text='Status of the Std. Reference')),
                ('doi', models.CharField(blank=True, help_text='Enter the DOI number that begins with 10 followed by a period', max_length=100, null=True, validators=[mb.models.validators.validate_doi])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterreference')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical source reference',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceMethod',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the method described in the Reference', max_length=500)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical source method',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceMeasurementValue',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('n_total', models.PositiveSmallIntegerField(blank=True, default=0, help_text='n for total number of specimens measured.', null=True)),
                ('n_unknown', models.PositiveSmallIntegerField(blank=True, default=0, help_text='n for total number of unknown gender specimens measured.', null=True)),
                ('n_male', models.PositiveSmallIntegerField(blank=True, default=0, help_text='n for total number of male specimens measured.', null=True)),
                ('n_female', models.PositiveSmallIntegerField(blank=True, default=0, help_text='n for total number of female specimens measured.', null=True)),
                ('minimum', models.DecimalField(decimal_places=10, help_text='Minimum measurement value reported.', max_digits=19)),
                ('maximum', models.DecimalField(decimal_places=10, help_text='Maximum measurement value reported.', max_digits=19)),
                ('mean', models.DecimalField(decimal_places=10, help_text='Mean of measurement values reported.', max_digits=19)),
                ('std', models.DecimalField(blank=True, decimal_places=10, default=None, help_text='Standard deviation of measurement values reported.', max_digits=19, null=True)),
                ('measurement_accuracy', models.TextField(blank=True, help_text='The description of the potential error associated with the measurementValue.', max_length=50, null=True)),
                ('measured_by', models.TextField(blank=True, help_text="A list (concatenated and separated) of names of people, groups, or organizations who determined the value of the measurement. The recommended best practice is to separate the values with a vertical bar (' | ').", max_length=100, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Source Measurement', max_length=500, null=True)),
                ('data_quality_score', models.SmallIntegerField(blank=True, default=0, help_text='Data quality score for the data', null=True)),
                ('cited_reference', models.CharField(blank=True, help_text="Enter the original reference, if not this study. If original, enter 'Original study'.", max_length=1000, null=True)),
                ('unit', models.CharField(blank=True, help_text='Measurement unit reported.', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('gender', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'choice_set': 'Gender'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.choicevalue')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('life_stage', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'choice_set': 'LifeStage'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.choicevalue')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_attribute', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceattribute')),
                ('source_entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceentity')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcelocation')),
                ('source_statistic', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcestatistic')),
                ('source_unit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceunit')),
            ],
            options={
                'verbose_name': 'historical source measurement value',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceLocation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Source Location', max_length=250)),
                ('verbatim_elevation', models.CharField(blank=True, help_text='The original textual description of the verbatim elevation.', max_length=250, null=True)),
                ('verbatim_longitude', models.CharField(blank=True, help_text='The original textual description of the verbatim longitude.', max_length=250, null=True)),
                ('verbatim_latitude', models.CharField(blank=True, help_text='The original textual description of the verbatim latitude.', max_length=250, null=True)),
                ('verbatim_depth', models.CharField(blank=True, help_text='The original textual description of the verbatim depth.', max_length=250, null=True)),
                ('verbatim_coordinate_system', models.CharField(blank=True, help_text='The original textual description of the verbatim coordinate system.', max_length=250, null=True)),
                ('verbatim_coordinates', models.CharField(blank=True, help_text='The original textual description of the verbatim coordinates.', max_length=250, null=True)),
                ('verbatim_srs', models.CharField(blank=True, help_text='The original textual description of the verbatim spatial reference system.', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical source location',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceHabitat',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('habitat_type', models.CharField(blank=True, help_text='Enter the Name of the Source Habitat', max_length=250, null=True)),
                ('habitat_percentage', models.CharField(blank=True, help_text='Enter the Percentage of the Source Habitat', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical source habitat',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceEntity',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Source Entity', max_length=250)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.entityclass')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
                ('taxon', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tdwg.taxon')),
            ],
            options={
                'verbose_name': 'historical source entity',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceChoiceSetOptionValue',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_choiceset_option', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcechoicesetoption')),
                ('source_entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceentity')),
            ],
            options={
                'verbose_name': 'historical source choice set option value',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceChoiceSetOption',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('display_order', models.PositiveSmallIntegerField(default=10, help_text='Display order on choises')),
                ('name', models.CharField(help_text='Enter the Source Choice Set Option', max_length=250)),
                ('description', models.TextField(blank=True, help_text='Enter the description for the Source Choice Set Option', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_attribute', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceattribute')),
            ],
            options={
                'verbose_name': 'historical source choice set option',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSourceAttribute',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Attribute', max_length=250)),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'Not Specified'), (1, 'Numerical variable'), (2, 'Categorical variable')], default=3, help_text='Select the type of the Attribute')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Attribute', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.entityclass')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('method', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcemethod')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical source attribute',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRelationClass',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the RelationClass', max_length=25)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical relation class',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReferenceRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterreference')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('relation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.relationclass')),
                ('source_reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical reference relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProximateAnalysisItem',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('cited_reference', models.CharField(blank=True, help_text='Enter the original reference, if not this study.', max_length=250, null=True)),
                ('sample_size', models.PositiveSmallIntegerField(blank=True, default=0, help_text='Sample size', null=True)),
                ('dm_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('moisture_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cp_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ee_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cf_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ash_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('nfe_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('total_carbohydrates_reported', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cp_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ee_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cf_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ash_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nfe_std', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('transformation', models.CharField(blank=True, max_length=250, null=True)),
                ('remarks', models.CharField(blank=True, help_text='Enter remarks.', max_length=250, null=True)),
                ('measurement_determined_by', models.CharField(blank=True, max_length=250, null=True)),
                ('measurement_remarks', models.CharField(blank=True, max_length=250, null=True)),
                ('moisture_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('moisture_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('dm_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('dm_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('ee_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ee_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('cp_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cp_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('cf_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('cf_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('ash_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ash_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('nfe_dispersion', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=7, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('nfe_measurement_method', models.CharField(blank=True, max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('forage', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.fooditem')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcelocation')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('proximate_analysis', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.proximateanalysis')),
            ],
            options={
                'verbose_name': 'historical proximate analysis item',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProximateAnalysis',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('cited_reference', models.CharField(blank=True, help_text='Enter the original reference, if not this study.', max_length=250, null=True)),
                ('study_time', models.CharField(blank=True, help_text='Enter the time when this study was performed.', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcelocation')),
                ('method', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcemethod')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical proximate analysis',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOccurrence',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('organism_quantity', models.CharField(blank=True, help_text='The number of organisms in the Occurrence.', max_length=50, null=True)),
                ('organism_quantity_type', models.CharField(blank=True, help_text='The type of the number of organisms in the Occurrence.', max_length=50, null=True)),
                ('occurrence_remarks', models.TextField(blank=True, help_text='Comments or notes about the Occurrence.', null=True)),
                ('associated_references', models.TextField(blank=True, help_text='References to other sources of information about the Occurrence.', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('event', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.event')),
                ('gender', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'choice_set': 'Gender'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.choicevalue')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('life_stage', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'choice_set': 'LifeStage'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.choicevalue')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceentity')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcelocation')),
                ('source_reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
            ],
            options={
                'verbose_name': 'historical occurrence',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterUnit',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the name of the Master Unit', max_length=25)),
                ('print_name', models.CharField(help_text='Enter the Print value of the name of a Master Unit', max_length=25)),
                ('quantity_type', models.CharField(help_text='Enter the Quantity type of the Master Unit', max_length=25)),
                ('unit_value', models.DecimalField(decimal_places=10, max_digits=19)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Master Unit', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical master unit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterReference',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('type', models.CharField(blank=True, choices=[('book', 'book'), ('book-chapter', 'book-chapter'), ('book-part', 'book-part'), ('book-section', 'book-section'), ('book-series', 'book-series'), ('book-set', 'book-set'), ('book-track', 'book-track'), ('component', 'component'), ('dataset', 'dataset'), ('dissertation', 'dissertation'), ('edited-book', 'edited-book'), ('journal', 'journal'), ('journal-article', 'journal-article'), ('journal-issue', 'journal-issue'), ('journal-volume', 'journal-volume'), ('monograph', 'monograph'), ('other', 'other'), ('posted-content', 'posted-content'), ('proceedings', 'proceedings'), ('proceedings-article', 'proceedings-article'), ('reference-book', 'reference-book'), ('reference-entry', 'reference-entry'), ('report', 'report'), ('report-series', 'report-series'), ('standard', 'standard'), ('standard-series', 'standard-series')], default='other', help_text='Select the type of the Standard Reference', max_length=25, null=True)),
                ('doi', models.CharField(blank=True, help_text='Enter the DOI number that begins with 10 followed by a period', max_length=100, null=True, validators=[mb.models.validators.validate_doi])),
                ('uri', models.URLField(blank=True, help_text='Enter the Uniform Resource Identifier link', null=True)),
                ('first_author', models.CharField(blank=True, help_text='Enter the name of the first author of the Standard Reference', max_length=50, null=True)),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2100)])),
                ('title', models.CharField(blank=True, help_text='Enter the Title of the Standard Reference', max_length=400, null=True)),
                ('container_title', models.CharField(blank=True, help_text='Enter the Container Title of the Standard Reference', max_length=100, null=True)),
                ('volume', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4000)])),
                ('issue', models.CharField(blank=True, help_text='Enter the Issue of the Standard Reference', max_length=5, null=True)),
                ('page', models.CharField(blank=True, help_text='Enter the Page(s) of the Standard Reference', max_length=50, null=True)),
                ('citation', models.CharField(help_text='Enter the Citation of the Standard Reference', max_length=500)),
                ('is_public', models.BooleanField(help_text='Enter if the source is public', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical master reference',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterLocation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Location', max_length=250)),
                ('locationID', models.CharField(blank=True, help_text='Enter the locationID of the Master Location', max_length=250, null=True)),
                ('continent', models.CharField(blank=True, help_text='Enter the continent of the Master Location', max_length=250, null=True)),
                ('country', models.CharField(blank=True, help_text='Enter the country of the Master Location', max_length=250, null=True)),
                ('countryCode', models.CharField(blank=True, help_text='Enter the country code of the Master Location', max_length=10, null=True)),
                ('stateProvince', models.CharField(blank=True, help_text='Enter the state province of the Master Location', max_length=250, null=True)),
                ('county', models.CharField(blank=True, help_text='Enter the county of the Master Location', max_length=250, null=True)),
                ('municipality', models.CharField(blank=True, help_text='Enter the municipality of the Master Location', max_length=250, null=True)),
                ('locality', models.CharField(blank=True, help_text='Enter the locality of the Master Location', max_length=250, null=True)),
                ('minimumElevationInMeters', models.CharField(blank=True, help_text='Enter the minimum elevation in meters of the Master Location', max_length=250, null=True)),
                ('maximumElevationInMeters', models.CharField(blank=True, help_text='Enter the maximum elevation in meters of the Master Location', max_length=250, null=True)),
                ('locationAccordingTo', models.CharField(blank=True, help_text='Enter the information about the source of this location information of the Master Location', max_length=250, null=True)),
                ('locationRemarks', models.CharField(blank=True, help_text='Enter the location remarks of the Master Location', max_length=250, null=True)),
                ('decimalLatitude', models.CharField(blank=True, help_text='Enter the decimal latitude of the Master Location', max_length=250, null=True)),
                ('decimalLongitude', models.CharField(blank=True, help_text='Enter the decimal longitude of the Master Location', max_length=250, null=True)),
                ('geodeticDatum', models.CharField(blank=True, help_text='Enter the geodetic datum of the Master Location', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('higherGeographyID', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterlocation')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterreference')),
            ],
            options={
                'verbose_name': 'historical master location',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterHabitat',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Habitat', max_length=250)),
                ('code', models.PositiveSmallIntegerField(blank=True, help_text='Enter the eco/biome/IIASA code of the Master Habitat', null=True)),
                ('group', models.CharField(blank=True, help_text='Enter the group or category of the Master Habitat', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterhabitat')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterreference')),
            ],
            options={
                'verbose_name': 'historical master habitat',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterEntity',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Entity', max_length=250)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.entityclass')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterreference')),
                ('taxon', models.ForeignKey(blank=True, db_constraint=False, help_text='The associated taxon (optional)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tdwg.taxon')),
            ],
            options={
                'verbose_name': 'historical master entity',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterChoiceSetOption',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('display_order', models.PositiveSmallIntegerField(default=10, help_text='Display order on choises')),
                ('name', models.CharField(help_text='Enter the Name of the Master Attribute', max_length=250)),
                ('description', models.TextField(blank=True, help_text='Enter description for the Master Choice Set Option', max_length=1500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_attribute', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterattribute')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical master choice set option',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterAttributeGroup',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Attribute Group', max_length=250)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Master Attribute Group', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical master attribute group',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMasterAttribute',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Master Attribute', max_length=250)),
                ('min_allowed_value', models.CharField(blank=True, help_text='Enter minimum value for the Master Attribute', max_length=25, null=True)),
                ('max_allowed_value', models.CharField(blank=True, help_text='Enter maximum value for the Master Attribute', max_length=25, null=True)),
                ('description', models.TextField(blank=True, help_text='Enter description for the Master Attribute', max_length=500, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Master Attribute', max_length=500, null=True)),
                ('value_type', models.CharField(choices=[('numeric', 'numeric'), ('integer', 'integer'), ('categorical', 'categorical'), ('ordinal', 'ordinal'), ('logical', 'logical'), ('character', 'character')], default='character', help_text='Select the valueType of the MasterAttribute', max_length=25)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.entityclass')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterreference')),
                ('unit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterunit')),
            ],
            options={
                'verbose_name': 'historical master attribute',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLocationRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterlocation')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcelocation')),
            ],
            options={
                'verbose_name': 'historical location relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalHabitatRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_habitat', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterhabitat')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_habitat', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcehabitat')),
            ],
            options={
                'verbose_name': 'historical habitat relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFoodItem',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(db_index=True, help_text='Enter the Name of the FoodItem', max_length=250)),
                ('is_cultivar', models.BooleanField(default=False, help_text='Is this Food Item a FAO cultivar?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('pa_tsn', models.ForeignKey(blank=True, db_column='pa_tsn', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='itis.taxonomicunits')),
                ('part', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'choice_set': 'FoodItemPart'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.choicevalue')),
                ('tsn', models.ForeignKey(blank=True, db_column='tsn', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='itis.taxonomicunits')),
            ],
            options={
                'verbose_name': 'historical food item',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEvent',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('verbatim_event_date', models.CharField(blank=True, help_text='The verbatim original representation of the date and time information for an Event.', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_habitat', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcehabitat')),
                ('source_method', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcemethod')),
            ],
            options={
                'verbose_name': 'historical event',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEntityRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Entity Relation', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('data_status', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'master_attribute__name': 'Verification'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterchoicesetoption')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterentity')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('relation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.relationclass')),
                ('relation_status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterchoicesetoption')),
                ('source_entity', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceentity')),
            ],
            options={
                'verbose_name': 'historical entity relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEntityClass',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('name', models.CharField(help_text='Enter the Name of the Entity Class', max_length=50)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical entity class',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDietSetItem',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('list_order', models.PositiveSmallIntegerField(default=100000, help_text='List order on Diet Set')),
                ('percentage', models.DecimalField(decimal_places=3, default=0, max_digits=9)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('diet_set', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.dietset')),
                ('food_item', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.fooditem')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical diet set item',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDietSet',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('sample_size', models.PositiveSmallIntegerField(default=0, help_text='Sample Size')),
                ('cited_reference', models.CharField(blank=True, help_text="Enter the original reference, if not this study. If original, enter 'Original study'.", max_length=250, null=True)),
                ('study_time', models.CharField(blank=True, help_text='Enter the time when this study was performed.', max_length=250, null=True)),
                ('data_quality_score', models.SmallIntegerField(blank=True, default=0, help_text='Data quality score for the data', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('gender', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to={'choice_set': 'Gender'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.choicevalue')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcelocation')),
                ('method', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcemethod')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('reference', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcereference')),
                ('taxon', models.ForeignKey(blank=True, db_constraint=False, limit_choices_to=models.Q(('entity__name', 'Genus'), ('entity__name', 'Species'), ('entity__name', 'Subspecies'), _connector='OR'), null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceentity')),
                ('time_period', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.timeperiod')),
            ],
            options={
                'verbose_name': 'historical diet set',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalChoiceValue',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('choice_set', models.CharField(help_text='Enter the Choice Set of the ChoiceValue', max_length=25)),
                ('caption', models.CharField(help_text='Enter the Caption of the ChoiceValue', max_length=25)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical choice value',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalChoiceSetOptionRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the ChoiceSetOption Relation', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_choiceset_option', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterchoicesetoption')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_choiceset_option', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourcechoicesetoption')),
            ],
            options={
                'verbose_name': 'historical choice set option relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAttributeRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('remarks', models.TextField(blank=True, help_text='Enter remarks for the Attribute Relation', max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_attribute', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterattribute')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_attribute', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.sourceattribute')),
            ],
            options={
                'verbose_name': 'historical attribute relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAttributeGroupRelation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('modified_on', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('display_order', models.PositiveIntegerField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('attribute', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterattribute')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('group', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mb.masterattributegroup')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'verbose_name': 'historical attribute group relation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='event',
            name='source_habitat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcehabitat'),
        ),
        migrations.AddField(
            model_name='event',
            name='source_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mb.sourcemethod'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='data_status',
            field=models.ForeignKey(limit_choices_to={'master_attribute__name': 'Verification'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='datastatusentityrelation', to='mb.masterchoicesetoption'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='master_entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterentity'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_entityrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='relation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.relationclass'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='relation_status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='relationstatusentityrelation', to='mb.masterchoicesetoption'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='source_entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourceentity'),
        ),
        migrations.AddField(
            model_name='dietset',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location_dietset', to='mb.sourcelocation'),
        ),
        migrations.AddField(
            model_name='dietset',
            name='method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='method_dietset', to='mb.sourcemethod'),
        ),
        migrations.AddField(
            model_name='dietset',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_dietset', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.AddField(
            model_name='dietset',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference'),
        ),
        migrations.AddField(
            model_name='dietset',
            name='taxon',
            field=models.ForeignKey(limit_choices_to=models.Q(('entity__name', 'Genus'), ('entity__name', 'Species'), ('entity__name', 'Subspecies'), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, related_name='taxon_dietset', to='mb.sourceentity'),
        ),
        migrations.AddField(
            model_name='dietset',
            name='time_period',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='time_period_dietset', to='mb.timeperiod'),
        ),
        migrations.AddField(
            model_name='choicesetoptionrelation',
            name='master_choiceset_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterchoicesetoption'),
        ),
        migrations.AddField(
            model_name='choicesetoptionrelation',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_choicesetoptionrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.AddField(
            model_name='choicesetoptionrelation',
            name='source_choiceset_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcechoicesetoption'),
        ),
        migrations.AddField(
            model_name='attributerelation',
            name='master_attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterattribute'),
        ),
        migrations.AddField(
            model_name='attributerelation',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_attributerelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.AddField(
            model_name='attributerelation',
            name='source_attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourceattribute'),
        ),
        migrations.AddField(
            model_name='attributegrouprelation',
            name='attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterattribute'),
        ),
        migrations.AddField(
            model_name='attributegrouprelation',
            name='created_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_attributegrouprelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.AddField(
            model_name='attributegrouprelation',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterattributegroup'),
        ),
        migrations.AddField(
            model_name='attributegrouprelation',
            name='modified_by',
            field=django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_attributegrouprelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned'),
        ),
        migrations.CreateModel(
            name='UnitConversion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('coefficient', models.DecimalField(decimal_places=10, max_digits=19)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_unitconversion', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('from_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_unit', to='mb.masterunit')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_unitconversion', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('to_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_unit', to='mb.masterunit')),
            ],
            options={
                'ordering': ['from_unit', 'to_unit'],
                'unique_together': {('from_unit', 'to_unit')},
            },
        ),
        migrations.CreateModel(
            name='ReferenceRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_referencerelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterreference')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_referencerelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('relation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.relationclass')),
                ('source_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcereference')),
            ],
            options={
                'unique_together': {('source_reference', 'master_reference')},
            },
        ),
        migrations.CreateModel(
            name='LocationRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_locationrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterlocation')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_locationrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcelocation')),
            ],
            options={
                'unique_together': {('source_location', 'master_location')},
            },
        ),
        migrations.CreateModel(
            name='HabitatRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_habitatrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('master_habitat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.masterhabitat')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_habitatrelation', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('source_habitat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.sourcehabitat')),
            ],
            options={
                'unique_together': {('source_habitat', 'master_habitat')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='entityrelation',
            unique_together={('source_entity', 'master_entity', 'relation')},
        ),
        migrations.CreateModel(
            name='DietSetItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the record active')),
                ('list_order', models.PositiveSmallIntegerField(default=100000, help_text='List order on Diet Set')),
                ('percentage', models.DecimalField(decimal_places=3, default=0, max_digits=9)),
                ('created_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby_dietsetitem', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
                ('diet_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.dietset')),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mb.fooditem')),
                ('modified_by', django_userforeignkey.models.fields.UserForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiedby_dietsetitem', to=settings.AUTH_USER_MODEL, verbose_name='The user that is automatically assigned')),
            ],
            options={
                'ordering': ['list_order', '-percentage'],
                'unique_together': {('diet_set', 'food_item')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='choicesetoptionrelation',
            unique_together={('source_choiceset_option', 'master_choiceset_option')},
        ),
        migrations.AlterUniqueTogether(
            name='attributerelation',
            unique_together={('source_attribute', 'master_attribute')},
        ),
    ]
